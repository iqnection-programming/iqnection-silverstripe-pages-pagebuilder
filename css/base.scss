
/*=====================================
uses:
.element {
	@include prefixer(transform, scale(1.5), ms webkit spec);
}
=======================================*/
@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      -webkit-#{$property}: $value;
    } @else if $prefix == moz {
      -moz-#{$property}: $value;
    } @else if $prefix == ms {
      -ms-#{$property}: $value;
    } @else if $prefix == o {
      -o-#{$property}: $value;
    } @else if $prefix == spec {
      #{$property}: $value;
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

/*=====================================
uses:
.element {
	@include transform(scale(1.5));
}
=======================================*/
@mixin transform($transform) {
  @include prefixer(transform, $transform, ms webkit spec);
}
/*=====================================
uses:
.element {
	@include transition(all 300ms ease);
}
=======================================*/
@mixin transition($transition: $defaultTransition) {
  @include prefixer(transition, $transition, ms webkit spec);
}

/*=====================================
uses:
.element {
	font-size:em(20px);
}
=======================================*/
@function em($target, $context: $baseFontSize) {
  @if $target == 0 {
    @return 0;
  }
  @return $target / $context + 0em;
}

@function vw($target, $context) {
  @if $target == 0 {
    @return 0;
  }
  @return 100 * ($target / $context) + 0vw; 
}

@function reduce($original, $factor) {
  @if $factor == 0 {
    @return $original;
  }
  @return ($original * (0.01 * $factor)) + 0px;
}

/*=====================================
uses:
.element {
	line-height:lh(20px,24px);
}
=======================================*/
@function lh($lineHeight, $fontSize) {
  @if $lineHeight == 0 {
    @return 1;
  }
  @if $fontSize == 0 {
    @return 1;
  }
  @return $lineHeight / $fontSize;
}